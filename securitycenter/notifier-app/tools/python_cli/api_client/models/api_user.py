# coding: utf-8

"""
    $API_ENDPOINT_URL

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, email=None, jira_uid=None, role=None, telephone_number=None):
        """
        ApiUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email': 'str',
            'jira_uid': 'str',
            'role': 'str',
            'telephone_number': 'str'
        }

        self.attribute_map = {
            'email': 'email',
            'jira_uid': 'jiraUid',
            'role': 'role',
            'telephone_number': 'telephoneNumber'
        }

        self._email = email
        self._jira_uid = jira_uid
        self._role = role
        self._telephone_number = telephone_number

    @property
    def email(self):
        """
        Gets the email of this ApiUser.

        :return: The email of this ApiUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this ApiUser.

        :param email: The email of this ApiUser.
        :type: str
        """

        self._email = email

    @property
    def jira_uid(self):
        """
        Gets the jira_uid of this ApiUser.

        :return: The jira_uid of this ApiUser.
        :rtype: str
        """
        return self._jira_uid

    @jira_uid.setter
    def jira_uid(self, jira_uid):
        """
        Sets the jira_uid of this ApiUser.

        :param jira_uid: The jira_uid of this ApiUser.
        :type: str
        """

        self._jira_uid = jira_uid

    @property
    def role(self):
        """
        Gets the role of this ApiUser.

        :return: The role of this ApiUser.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this ApiUser.

        :param role: The role of this ApiUser.
        :type: str
        """

        self._role = role

    @property
    def telephone_number(self):
        """
        Gets the telephone_number of this ApiUser.

        :return: The telephone_number of this ApiUser.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """
        Sets the telephone_number of this ApiUser.

        :param telephone_number: The telephone_number of this ApiUser.
        :type: str
        """

        self._telephone_number = telephone_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
